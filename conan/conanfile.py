from conans import ConanFile, tools
from conan.tools.cmake import CMake, CMakeToolchain, cmake_layout

from os import path


class EntityprotosConan(ConanFile):
    """ Conan recipe for Entityprotos """

    name = "entityprotos"
    license = "MIT License"
    url = "https://github.com/Adnn/entityprotos"
    description = "Repository of prototypes for entity ECS."
    #topics = ("", "", ...)
    settings = ("os", "compiler", "build_type", "arch")
    options = {
        "build_tests": [True, False],
        "shared": [True, False],
        "visibility": ["default", "hidden"],
    }
    default_options = {
        "build_tests": False,
        "shared": False,
        "visibility": "hidden"
    }

    requires = (
        "entity/game2",
        "graphics/game2",
    )

    # Note: It seems conventionnal to add CMake build requirement
    # directly to the build profile.
    #build_requires = ()

    build_policy = "missing"
    generators = "CMakeDeps", "CMakeToolchain"

    scm = {
        "type": "git",
        "url": "auto",
        "revision": "auto",
        "submodule": "recursive",
    }


    def _configure_cmake(self):
        cmake = CMake(self)
        cmake.configure()
        return cmake


    def configure(self):
        tools.check_min_cppstd(self, "20")


    def layout(self):
        # Otherwise, root is the folder containing conanfile.py
        self.folders.root = ".."
        # Handles single-config (with subfolders) and multi-config (in a common folder)
        cmake_layout(self)


    def generate(self):
        toolchain = CMakeToolchain(self)
        # cache_variables are written to CMakePresets.json
        toolchain.cache_variables["BUILD_tests"] = str(self.options.build_tests)
        toolchain.generate()


    def build(self):
        cmake = self._configure_cmake()
        cmake.build()


    def package(self):
        cmake = self._configure_cmake()
        cmake.install()


    def package_info(self):
        # Disable the config package that would otherwise be generated by CMakeDeps
        self.cpp_info.set_property("cmake_find_mode", "none")
        # Find CMake-generated package config when consuming the (installed) conan package
        self.cpp_info.builddirs = [path.join("lib", "cmake")]
